#!/usr/bin/env node

const program = require('commander');
const chalk = require('chalk');
const inquirer = require('inquirer');
const path = require('path');
const rm = require('rimraf').sync;
const uuidV1 = require('uuid/v1');
const ora = require('ora');
const os = require('os');
const download = require('download-git-repo');
const shell = require('shelljs');
const log = require('../src/logger');
const checkRepos = require('../src/check-repos');
const generate = require('../src/generate');
const utils = require('../src/utils');
const checkVersion = require('../src/check-version');

/**
 * Usage.
 */
program
  .usage('<src-name> [project-name]')
  .option('-c, --clone', 'use git clone')
  .option('-o, --origin', 'set git remote origin')
  .option('--offline', 'use cached src');

/**
 * Help.
 */
program.on('--help', function () {
  log.tips('  Examples:');
  log.tips();
  log.tips(chalk.gray('    # create a new project with an src from github.'));
  log.tips('    $ maptalks init maptalks/maptalks-plugin my-project');
  log.tips('    $ maptalks init maptalks/maptalks-plugin my-project -o git@github.com:xx/xxxx.git');
  log.tips();
});

/**
 * if no args, run help
 */
function help () {
  program.parse(process.argv);
  if (program.args.length < 1) return program.help()
}

help();

/**
 * Padding.
 */

log.tips();
process.on('exit', () => log.tips());

/**
 * Settings.
 */
let template = program.args[0];
let projectDirName = program.args[1];
if (!projectDirName || /^\w:\/?$/.test(projectDirName)) {
  projectDirName = '.'
}
let origin = program.args[2];
let projectName = projectDirName === '.' ? path.relative('../', process.cwd()) : projectDirName;
let projectDirPath = path.resolve(projectDirName || '.');
let clone = program.clone || false;
let hasSlash = template.indexOf('/') > -1;
let preProjectName = projectName;
if (!hasSlash) {
  template = `sakitam-gis/${template}`
}

/**
 * is has git res, set it
 */
function setOrigin () {
  // set origin
  try {
    shell.cd(projectDirPath);
    shell.exec(`git init`, {async: false});
    shell.exec(`git remote add origin ${origin}`, {async: false});
    log.tips(chalk.green(`${projectName} is related to remote repo: ${origin}`));
  } catch (e) {
    log.tips(chalk.red(`set git remote origin faild: ${e.message}`));
  }
}

if (utils.isExist(projectDirPath)) {
  inquirer.prompt([{
    type: 'confirm',
    message: projectDirName === '.'
      ? 'Generate project in current directory?'
      : 'Target directory exists. Continue?',
    name: 'ok'
  }]).then((answers) => {
    if (answers.ok) {
      log.tips();
      runTask();
    }
  });
} else {
  // convert projectName(eg: xxx/, xxx/sss, /xxx/sss, c:/xxx/sss) to xxx
  let normalizeName = '';
  let index = projectName.indexOf('/');
  if (projectDirName.startsWith('/') || /^\w:/.test(projectDirName)) {
    normalizeName = projectName.substr(index).split('/')[0] || projectName.substr(index).split('/')[1];
    normalizeName = normalizeName || 'demo';
  } else if (index >= 0) {
    normalizeName = projectName.split('/')[0];
  } else {
    normalizeName = projectName;
  }
  if (normalizeName && normalizeName !== projectName) {
    inquirer.prompt([{
      type: 'confirm',
      message: `Your project's name will be created as ${normalizeName}`,
      name: 'ok'
    }]).then((answers) => {
      if (answers.ok) {
        log.tips();
        projectName = normalizeName;
        runTask();
      }
    });
  } else {
    runTask();
  }
}

function runTask () {
  let isLocalTemplate = utils.isLocalTemplate(template);
  if (isLocalTemplate) {
    let templatePath = template.startsWith('/') || /^\w:/.test(template)
      ? template : path.normalize(path.join(process.cwd(), template));
    if (utils.isExist(templatePath)) {
      log.success(`Template is from ${templatePath}`);
      log.tips();
      generate(projectName, templatePath, projectDirPath, (err, msg = "") => {
        if (err) {
          log.error(`Generated error: ${err.message.trim()}`);
        }
        if (origin && /\.git$/.test(origin)) {
          setOrigin();
        }
        if (msg) {
          let re = /{{[^{}]+}}/g;
          log.tips('\n' + msg.replace(re, projectName).split(/\r?\n/g).map(function (line) {
            return '   ' + line
          }).join('\n'));
        }
      });
    } else {
      log.tips();
      log.error(`Local template ${template} not found.`);
    }
  } else {
    // let arr = src.split(path.sep);
    // console.log('arr', arr, path.sep)
    // if (arr.length < 2 || !arr[0] || !arr[1]) {
    //   return program.help();
    // }
    log.tips();
    log.tips(chalk.red(`Local template ${template} not found. Will check it from github.`));
    log.tips();
    // convert src path to xxx/xxx
    template = template.split(path.sep).slice(0, 2).join('/');
    // check repo from github.com
    checkVersion(() => {
      checkRepos(template, downloadAndGenerate);
    });
  }
}

/**
 * Download a generate from a src repo.
 *
 * @param {String} template
 */

function downloadAndGenerate (template) {
  const tmp = os.tmpdir() + path.sep + '.maptalks-plugin-src' + uuidV1();
  let spinner = ora({
    text: `start downloading template: ${template}`,
    color: "blue"
  }).start();
  download(template, tmp, { clone }, err => {
    process.on('exit', () => rm(tmp));
    if (err) {
      // err.code/err.message;
      spinner.text = chalk.red(`Failed to download template ${template}: ${err.message.trim()}`);
      spinner.fail();
      process.exit(1);
    }
    spinner.text = chalk.green(`${template} downloaded success`);
    spinner.succeed();
    log.tips();
    generate(projectName, tmp, projectDirPath, (err, msg = "") => {
      if (err) {
        log.error(`Generated error: ${err.message.trim()}`);
      }
      if (origin && /\.git$/.test(origin)) {
        setOrigin();
      }
      if (msg) {
        let re = /{{[^{}]+}}/g;
        log.tips('\n' + msg.replace(re, preProjectName).split(/\r?\n/g).map(function (line) {
          return '   ' + line
        }).join('\n'));
      }
    });
  })
}
